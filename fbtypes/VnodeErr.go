// automatically generated by the FlatBuffers compiler, do not modify

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type VnodeErr struct {
	_tab flatbuffers.Table
}

func GetRootAsVnodeErr(buf []byte, offset flatbuffers.UOffsetT) *VnodeErr {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &VnodeErr{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *VnodeErr) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *VnodeErr) Vnode(obj *Vnode) *Vnode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Vnode)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *VnodeErr) Err() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func VnodeErrStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func VnodeErrAddVnode(builder *flatbuffers.Builder, Vnode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(Vnode), 0)
}
func VnodeErrAddErr(builder *flatbuffers.Builder, Err flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(Err), 0)
}
func VnodeErrEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
