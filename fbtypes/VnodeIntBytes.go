// automatically generated by the FlatBuffers compiler, do not modify

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type VnodeIntBytes struct {
	_tab flatbuffers.Table
}

func GetRootAsVnodeIntBytes(buf []byte, offset flatbuffers.UOffsetT) *VnodeIntBytes {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &VnodeIntBytes{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *VnodeIntBytes) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *VnodeIntBytes) Vnode(obj *Vnode) *Vnode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Vnode)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *VnodeIntBytes) Int() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *VnodeIntBytes) MutateInt(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *VnodeIntBytes) Bytes(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *VnodeIntBytes) BytesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *VnodeIntBytes) BytesBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func VnodeIntBytesStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func VnodeIntBytesAddVnode(builder *flatbuffers.Builder, Vnode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(Vnode), 0)
}
func VnodeIntBytesAddInt(builder *flatbuffers.Builder, Int int32) {
	builder.PrependInt32Slot(1, Int, 0)
}
func VnodeIntBytesAddBytes(builder *flatbuffers.Builder, Bytes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(Bytes), 0)
}
func VnodeIntBytesStartBytesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func VnodeIntBytesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
